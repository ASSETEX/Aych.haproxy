package cmd

import (
	"fmt"
	"os"

	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	"github.com/StackExchange/haproxy-kubefigurator/haproxyconfigurator"
)

var commandLineFlags = struct {
	clusterName string
	kubeconfig  string
	verbosity   int
}{}
var logger = logrus.New()

// RootCmd is generated by Cobra
var RootCmd = &cobra.Command{
	Use:              "haproxy-kubefigurator",
	Short:            "Dynamically configure haproxy load balancers for Kubernetes services",
	Long:             ``,
	PersistentPreRun: persistentPreRun,
}

// Execute is the entrypoint for the app
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.clusterName, "cluster", "", "", "cluster string for scoped services")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.kubeconfig, "kubeconfig", "", "", "Kubeconfig file path; leave empty for in-cluster config")
	RootCmd.PersistentFlags().CountVarP(&commandLineFlags.verbosity, "verbosity", "v", "Output verbosity")
}

func persistentPreRun(cmd *cobra.Command, args []string) {
	switch commandLineFlags.verbosity {
	case 0:
		logger.Level = logrus.ErrorLevel
		break
	case 1:
		logger.Level = logrus.WarnLevel
		break
	case 2:
		fallthrough
	case 3:
		logger.Level = logrus.InfoLevel
		break
	default:
		logger.Level = logrus.DebugLevel
		break
	}

	haproxyconfigurator.SetLogger(logger)
}

package cmd

import (
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	"github.com/stackexchange/haproxy-kubefigurator/haproxyconfigurator"
)

var commandLineFlags = struct {
	clusterName string
	etcdOptions haproxyconfigurator.EtcdOptions
	kubeconfig  string
	verbosity   int
}{}
var logger = logrus.New()

// RootCmd is generated by Cobra
var RootCmd = &cobra.Command{
	Use:              "haproxy-kubefigurator",
	Short:            "Dynamically configure haproxy load balancers for Kubernetes services",
	Long:             ``,
	PersistentPreRun: persistentPreRun,
}

// Execute is the entrypoint for the app
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.clusterName, "cluster", "", "", "cluster string for scoped services")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdOptions.CAFile, "etcd-ca-file", "", "", "File containing CA to trust for etcd connection")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdOptions.ClientCertFile, "etcd-client-cert-file", "", "", "File containing client cert file to authorize etcd connection")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdOptions.ClientKeyFile, "etcd-client-key-file", "", "", "File containing client cert key file to authorize etcd connection")
	RootCmd.PersistentFlags().StringSliceVarP(&commandLineFlags.etcdOptions.Hosts, "etcd-host", "", []string{"http://127.0.0.1:2379"}, "etcd Host; can be specified multiple times for multiple hosts")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdOptions.Path, "etcd-path", "", "stackexchange.com/haproxy-kubefigurator/config", "etcd Path")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.kubeconfig, "kubeconfig", "", "", "Kubeconfig file path; leave empty for in-cluster config")
	RootCmd.PersistentFlags().CountVarP(&commandLineFlags.verbosity, "verbosity", "v", "Output verbosity")
}

func persistentPreRun(cmd *cobra.Command, args []string) {
	switch commandLineFlags.verbosity {
	case 0:
		logger.Level = logrus.ErrorLevel
		break
	case 1:
		logger.Level = logrus.WarnLevel
		break
	case 2:
		fallthrough
	case 3:
		logger.Level = logrus.InfoLevel
		break
	default:
		logger.Level = logrus.DebugLevel
		break
	}

	haproxyconfigurator.SetLogger(logger)

	logger.Debug("Configuring TLS for etcd access")

	commandLineFlags.etcdOptions.TLSConfig = &tls.Config{}

	if commandLineFlags.etcdOptions.CAFile != "" {
		cert, err := ioutil.ReadFile(commandLineFlags.etcdOptions.CAFile)
		if err != nil {
			logger.Fatalf("Could not read certificate file: %s", commandLineFlags.etcdOptions.CAFile)
		}
		commandLineFlags.etcdOptions.TLSConfig.RootCAs = x509.NewCertPool()
		if !commandLineFlags.etcdOptions.TLSConfig.RootCAs.AppendCertsFromPEM(cert) {
			logger.Fatalf("Could not load certificate from %s", commandLineFlags.etcdOptions.CAFile)
		}
	}
	if commandLineFlags.etcdOptions.ClientCertFile != "" && commandLineFlags.etcdOptions.ClientKeyFile != "" {
		cert, err := tls.LoadX509KeyPair(commandLineFlags.etcdOptions.ClientCertFile, commandLineFlags.etcdOptions.ClientKeyFile)
		if err != nil {
			logger.Fatal(err)
		}
		commandLineFlags.etcdOptions.TLSConfig.Certificates = []tls.Certificate{cert}
		// commandLineFlags.etcdOptions.TLSConfig.BuildNameToCertificate()
	} else if commandLineFlags.etcdOptions.ClientCertFile != "" || commandLineFlags.etcdOptions.ClientKeyFile != "" {
		logger.Fatal("Both --etcd-client-cert-file and etcd-client-key-file must be specified to use client auth via TLS certificates")
	}

	logger.Debug("Pre-run complete")
}

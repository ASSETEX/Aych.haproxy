package cmd

import (
	"fmt"
	"os"

	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	"github.com/stackexchange/haproxy-kubefigurator/haproxyconfigurator"
)

var commandLineFlags = struct {
	clusterName        string
	etcdCAFile         string
	etcdClientCertFile string
	etcdHost           string
	etcdPath           string
	kubeconfig         string
	verbosity          int
}{}
var logger = logrus.New()

// RootCmd is generated by Cobra
var RootCmd = &cobra.Command{
	Use:   "haproxy-kubefigurator",
	Short: "Dynamically configure haproxy load balancers for Kubernetes services",
	Long:  ``,
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		switch commandLineFlags.verbosity {
		case 0:
			logger.Level = logrus.ErrorLevel
			break
		case 1:
			logger.Level = logrus.WarnLevel
			break
		case 2:
			fallthrough
		case 3:
			logger.Level = logrus.InfoLevel
			break
		default:
			logger.Level = logrus.DebugLevel
			break
		}

		haproxyconfigurator.SetLogger(logger)

		logger.Debug("Pre-run complete")
	},
}

// Execute is the entrypoint for the app
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	RootCmd.PersistentFlags().CountVarP(&commandLineFlags.verbosity, "verbosity", "v", "Output verbosity")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.kubeconfig, "kubeconfig", "", "", "Kubeconfig file path; leave empty for in-cluster config")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdCAFile, "etcd-ca-file", "", "", "File containing CA to trust for etcd connection")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdClientCertFile, "etcd-client-cert-file", "", "", "File containing client cert file to authorize etcd connection")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdHost, "etcd-host", "", "http://127.0.0.1:2379", "etcd Host")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.etcdPath, "etcd-path", "", "stackexchange.com/haproxy-kubefigurator/config", "etcd Path")
	RootCmd.PersistentFlags().StringVarP(&commandLineFlags.clusterName, "cluster", "", "", "cluster string for scoped services")
}
